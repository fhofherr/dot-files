#!/usr/bin/env bash
set -e

: "${TESTCOVERAGE_FILE:=$PWD/.coverage.out}"
: "${TESTCOVERAGE_TESTFLAGS:=-race}"
: "${TESTCOVERAGE_CLEAN_GENERATED:=true}"

if [[ $EUID = 0 ]]; then
    echo "You can't be root"
    exit 1
fi

if [[ ! -f "$PWD/go.mod" ]]; then
    echo "$0 needs to be called from the Go project's root directory."
    exit 1
fi

if ! command -v go >/dev/null 2>&1; then
    echo "No go executable found"
    exit 1
fi

GO_PACKAGES=$(command go list ./... | grep -v scripts | tr "\n" "," | head -c -1)
command go test \
    "$TESTCOVERAGE_TESTFLAGS" \
    -p 1 \
    -race \
    -count=1 \
    -covermode=atomic \
    -coverprofile="$TESTCOVERAGE_FILE" \
    -coverpkg="$GO_PACKAGES" \
    ./... 2>/dev/null

# Good enough heuristic to clean generated files.
#
# Basically whenever the file ends with *.something.go it is assumed to be
# generated. Examples for such files are *.pb.go files or *.string.go files.
#
# Additionally any file named testing.go is removed.
if [[ "$TESTCOVERAGE_CLEAN_GENERATED" == "true" ]]; then
    echo
    echo "Cleaning generated files"

    sed -i.bak -e'
    /^.\+\.[[:alpha:]]\+\.go:.\+$/d
    /^.\+testing.go:.\+$/d
    ' "$TESTCOVERAGE_FILE"
fi

if [[ "$1" = "html" ]]; then
    command go tool cover -html="$TESTCOVERAGE_FILE"
fi
command go tool cover -func="$TESTCOVERAGE_FILE" | tail -n1

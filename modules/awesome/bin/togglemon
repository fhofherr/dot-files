#!/usr/bin/env python

import getpass
import hashlib
import os
import re
import shutil
import signal
import subprocess
import sys
import time

DELL_XPS = "47b1e3e6a4f6d3ded9b3ae89d4ae27610bd0832e8c22af068da9d884610847f0"
HOME_OFFICE = "2dd61d8c7bb2c6ea2755c7fabe598b21643e9ff52863511304d2cc778443e39b"
HOME_OFFICE_HDMI2 = "7627eef17acfcc404607d43cb4e0068b8d30ab8c40079b4f9ec9ce25f471b0e4"
OFFICE = "54866818688082877ba0975c4a9cad60f85e08c5e4119a17839c8620b3040e38"
TUXEDO_NOTEBOOK = "dde2d427f1bb6bb7226043b024ef5c5262c1782f55eabcf97c1217fe8b80d0a6"

OUTPUT_CONFIG = {
    TUXEDO_NOTEBOOK: {
        # Laptop screen. Don't change anything.
        "keep": True
    },
    DELL_XPS: {
        "keep": True
    },
    HOME_OFFICE: {
        "rate": 75,
        "mode": "3840x1600",
        "primary": True,
        "right-of": [
            DELL_XPS,
            TUXEDO_NOTEBOOK,
        ],
    },
    HOME_OFFICE_HDMI2: {
        "rate": 75,
        "mode": "3840x1600",
        "primary": True,
        "right-of": [
            DELL_XPS,
            TUXEDO_NOTEBOOK,
        ],
    },
    OFFICE: {
        "primary": True,
        "auto": True,
        "right-of": [
            DELL_XPS,
        ],
    }
}

XRANDR_CMD = shutil.which("xrandr")
PICOM_CMD = shutil.which("picom")
PGREP_CMD = shutil.which("pgrep")


def pgrep(cmd):
    if not PGREP_CMD:
        return None
    p = subprocess.run(
        [PGREP_CMD, "-u", getpass.getuser(), cmd], capture_output=True)
    if p.returncode != 0:
        return None
    pid = p.stdout.decode("utf-8")
    return int(pid)


def stop_picom():
    pid = pgrep("picom")
    while pid:
        os.kill(pid, signal.SIGTERM)
        time.sleep(0.01)
        pid = pgrep("picom")


def start_picom():
    os.execl(PICOM_CMD, PICOM_CMD)


OUTPUT_CONNECTED_RE = re.compile(r"^(?P<output>\S+)\s+connected.*$")
EDID_PART_RE = re.compile(r"^\s*(?P<edid_part>[a-fA-F0-9]+)\s*$")


def query_outputs():
    def parse_edid(lines):
        edid = []
        edid_found = False
        for line in lines:
            if "EDID" in line:
                edid_found = True
                continue
            if not edid_found:
                continue
            m = EDID_PART_RE.match(line)
            if not m:
                return "".join(edid)
            edid.append(m.group("edid_part"))

    if not XRANDR_CMD:
        return None
    p = subprocess.run([XRANDR_CMD, "--properties"], capture_output=True)
    if p.returncode != 0:
        return None
    lines = p.stdout.decode("utf-8").splitlines()
    edids = {}
    for i, line in enumerate(lines):
        output = None
        m = OUTPUT_CONNECTED_RE.match(line)
        if m:
            output = m.group("output")
        if not output:
            continue
        edid = parse_edid(lines[i + 1:])
        edid = hashlib.sha256(edid.encode()).hexdigest()
        edids[output] = edid
    return edids


def configure_outputs(outputs, dry_run=False):
    def xrandr_args(output, edid, inverse):
        cfg = OUTPUT_CONFIG.get(edid)
        if not cfg:
            return None
        if cfg.get("keep", False):
            return None
        args = ["--output", output]
        if cfg.get("auto", False):
            args += ["--auto"]
        if cfg.get("primary", False):
            args += ["--primary"]
        if "rate" in cfg:
            args += ["--rate", str(cfg["rate"])]
        if "mode" in cfg:
            args += ["--mode", str(cfg["mode"])]
        for o in cfg.get("right-of", []):
            if o not in inverse:
                continue
            args += ["--right-of", inverse[o]]
        return args

    inverse = dict((v, k) for k, v in outputs.items())
    for output, edid in outputs.items():
        args = xrandr_args(output, edid, inverse)
        if not args:
            continue
        cmd = [XRANDR_CMD] + args
        if dry_run:
            print(" ".join(cmd))
            continue
        subprocess.run(cmd)


if __name__ == "__main__":
    outputs = query_outputs()
    if len(sys.argv) == 2 and sys.argv[1] == "test":
        configure_outputs(outputs, dry_run=True)
        sys.exit(0)
    if len(sys.argv) == 2 and sys.argv[1] == "identify":
        for k in sorted(outputs):
            print(f"{k}\t{outputs[k]}")
        sys.exit(0)

    stop_picom()
    if len(outputs) >= 1:
        configure_outputs(outputs)
    start_picom()
